/*
 * This file is generated by jOOQ.
 */
package com.example.snowalkershardingjdbcdemo.sjb.repos.tables;


import com.example.snowalkershardingjdbcdemo.sjb.repos.Indexes;
import com.example.snowalkershardingjdbcdemo.sjb.repos.Keys;
import com.example.snowalkershardingjdbcdemo.sjb.repos.Public;
import com.example.snowalkershardingjdbcdemo.sjb.repos.tables.records.TOrderRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrder extends TableImpl<TOrderRecord> {

    private static final long serialVersionUID = -154425178;

    /**
     * The reference instance of <code>PUBLIC.t_order</code>
     */
    public static final TOrder T_ORDER = new TOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrderRecord> getRecordType() {
        return TOrderRecord.class;
    }

    /**
     * The column <code>PUBLIC.t_order.id</code>.
     */
    public final TableField<TOrderRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.t_order.user_id</code>.
     */
    public final TableField<TOrderRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.defaultValue(DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.t_order.order_id</code>.
     */
    public final TableField<TOrderRecord, Long> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.BIGINT.defaultValue(DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.t_order.user_name</code>.
     */
    public final TableField<TOrderRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>PUBLIC.t_order</code> table reference
     */
    public TOrder() {
        this(DSL.name("t_order"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.t_order</code> table reference
     */
    public TOrder(String alias) {
        this(DSL.name(alias), T_ORDER);
    }

    /**
     * Create an aliased <code>PUBLIC.t_order</code> table reference
     */
    public TOrder(Name alias) {
        this(alias, T_ORDER);
    }

    private TOrder(Name alias, Table<TOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrder(Name alias, Table<TOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TOrder(Table<O> child, ForeignKey<O, TOrderRecord> key) {
        super(child, key, T_ORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_A);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOrderRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOrderRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_A;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrderRecord>>asList(Keys.CONSTRAINT_A);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrder as(String alias) {
        return new TOrder(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrder as(Name alias) {
        return new TOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrder rename(String name) {
        return new TOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrder rename(Name name) {
        return new TOrder(name, null);
    }
}
